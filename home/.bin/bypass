#!/usr/bin/env ruby
require 'yaml'
require 'optparse'

class Time
  def self.today
    to_date Time.now
  end

  def today?
    self.class.to_date(self) == self.class.today
  end

  def self.to_date(date)
    Time.new date.year, date.month, date.day
  end
end

module Bypasser
  class Unblocker
    def unblock
      `cp /etc/hosts.unfocus /etc/hosts`
    end
  end

  class Bypass
    BYPASS_FILE = '/etc/bypass.yml'
    MAX_DAILY_BYPASSES = 3

    def initialize
      @unblocker = Unblocker.new
    end

    def access
      @unblocker.unblock

      @times << Time.now
      save
    end

    def times
      @times ||= YAML.load_file(BYPASS_FILE) || []
    end

    def eligible?
       today.count < MAX_DAILY_BYPASSES
    end

    def today
      times.select { |t| t.today? }
    end

    def save
      File.open(BYPASS_FILE, 'w') { |f| f.write YAML.dump(times) }
    end
  end

  class CLI
    def initialize
      @options = {}
      @bypass = Bypass.new
    end

    def run(args)
      OptionParser.new do |opts|
        opts.banner = "Usage: example.rb [options]"

        opts.on("-c", "--count-today", "Count today") do |v|
          @options[:count_today] = true
        end
      end.parse!(args)

      return check if @options[:count_today]
      access
    end

    def check
      puts "#{@bypass.today.count}/#{@bypass.class::MAX_DAILY_BYPASSES} bypasses today"
    end

    def access
      @bypass.access if @bypass.eligible?
      puts @bypass.today.count.to_s + " bypasses today"
    end
  end
end


Bypasser::CLI.new.run(ARGV)
